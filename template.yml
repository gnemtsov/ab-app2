AWSTemplateFormatVersion: 2010-09-09
Transform:
    - AWS::Serverless-2016-10-31
    - AWS::CodeStar

Description: AB-APP2 CD template

Parameters:
    ProjectId:
        Type: String
        Description: AWS CodeStar projectID used to associate new resources to team members
    APIName:
        Type: String
        Description: "Name of the AppSync API"
        Default: "ABAPP2API"
        MinLength: 3
        MaxLength: 20
        AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_]*$"

Resources:
    IdentityPool:
        Type: "AWS::Cognito::IdentityPool"
        Properties:
            AllowUnauthenticatedIdentities: true

    IdentityRoleAttachment:
        Type: "AWS::Cognito::IdentityPoolRoleAttachment"
        Properties:
            IdentityPoolId: !Ref IdentityPool
            Roles:
                unauthenticated: !GetAtt [IdentityRole, Arn]

    Lambda:
        Type: "AWS::Serverless::Function"
        Properties:
            Handler: index.handler
            Runtime: nodejs8.10
            CodeUri: backend
            Environment:
                Variables:
                    DB_HOST: "{{resolve:ssm:/ab-app2/db-host:1}}"
                    DB_NAME: "{{resolve:ssm:/ab-app2/db-name:1}}"
                    DB_PASSWORD: "{{resolve:ssm:/ab-app2/db-password:1}}"
                    DB_USER: "{{resolve:ssm:/ab-app2/db-user:1}}"
                    PROD: "{{resolve:ssm:/ab-app2/prod:1}}"
                    SECRET: "{{resolve:ssm:/ab-app2/secret:1}}"
            VpcConfig:
                SecurityGroupIds:
                    - "sg-b17c96d6"
                SubnetIds:
                    - "subnet-750ef410"
                    - "subnet-88af4eff"
                    - "subnet-ebc2c5ad"

    AppSyncRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "appsync.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Policies:
                - PolicyName: "allow-access-to-lambda-from-appsync"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action: "lambda:invokeFunction"
                            Resource:
                                - !GetAtt [Lambda, Arn]
                                - !Join ["", [!GetAtt [Lambda, Arn], ":*"]]

    IdentityRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Federated: "cognito-identity.amazonaws.com"
                      Action:
                          - "sts:AssumeRoleWithWebIdentity"
                      Condition:
                          StringEquals:
                              "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
                          "ForAnyValue:StringLike":
                              "cognito-identity.amazonaws.com:amr": unauthenticated
            Policies:
                - PolicyName: "allow-unauthenticated-access-to-appsync"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action: "appsync:GraphQL"
                            Resource:
                                - !Join ["", [!GetAtt [AppSyncApi, Arn], "/*"]]

    AppSyncApi:
        Type: "AWS::AppSync::GraphQLApi"
        Description: "The GraphQL API for AB-APP"
        Properties:
            AuthenticationType: "AWS_IAM"
            Name: !Sub ${APIName}

    AppSyncSchema:
        Type: "AWS::AppSync::GraphQLSchema"
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            DefinitionS3Location: schema.gql

    AppSyncDataSource:
        Type: "AWS::AppSync::DataSource"
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            Name: "ab_app_lambda"
            Description: "The AB-APP AppSync Data Source"
            Type: AWS_LAMBDA
            ServiceRoleArn: !GetAtt [AppSyncRole, Arn]
            LambdaConfig:
                LambdaFunctionArn: !GetAtt [Lambda, Arn]

    AppSyncDataSourceSocket:
        Type: "AWS::AppSync::DataSource"
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            Name: "ab_app_socket"
            Type: NONE

    AppSyncGetFormQueryResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Query
            FieldName: getForm
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "forms",
                      "action": "getForm",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncListDepartmentsQueryResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Query
            FieldName: listDepartments
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "departments",
                      "action": "list",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncLoginMutationResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Mutation
            FieldName: login
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "auth",
                      "action": "login",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncTokenMutationResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Mutation
            FieldName: token
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "auth",
                      "action": "token",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncAddMutationResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Mutation
            FieldName: add
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "departments",
                      "action": "add",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncEditMutationResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Mutation
            FieldName: edit
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "departments",
                      "action": "edit",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncRemoveMutationResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Mutation
            FieldName: remove
            DataSourceName: !GetAtt [AppSyncDataSource, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "module": "departments",
                      "action": "remove",
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

    AppSyncNewEditResolver:
        Type: "AWS::AppSync::Resolver"
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt [AppSyncApi, ApiId]
            TypeName: Subscription
            FieldName: newEdit
            DataSourceName: !GetAtt [AppSyncDataSourceSocket, Name]
            RequestMappingTemplate: |
                {
                  "version" : "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "arguments": $utils.toJson($context.arguments),
                      "identity": $utils.toJson($context.identity),
                      "headers": $utils.toJson($context.request.headers)
                  }
                }
            ResponseMappingTemplate: "$util.toJson($context.result)"

#Outputs:
#    IdentityPoolId:
#        Value: !Ref IdentityPool
#        Export:
#            Name: "IdentityPool::Id"
